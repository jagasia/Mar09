Reminder:	Autocommit to false and explicitly commit or rollback based on the outcome of the transaction.
Triggers
NOCOPY
	when a OUT parameter return LOB, then formal and actual paramters (2 copies of LOB) will be risky for memory considerations.
	By using NOCOPY, only one copy of the LOB is maintained in the memory.

f(x,y)

f(2,3)	this is based on positional parameters
f(y=>2, x=>3)	this is named parameters

in sql developer, we right click a function and run. it generates a sample code that calls the function

------------------------------------------------------------------------------
Java and Oracle
	Java programs are going to access the databases like Oracle, Mysql, etc...
How is it possible?
	Java language developed by Sun microsystems (adopted by Oracle corporation)

	Database like MS Sql server (Microsoft), DB2 (IBM) are developed by different vendors.

	How is it possible for a java program to influence a database?

	Tomorrow, if we invent a new RDBMS, how can java access our (rdbms)project ?

	It is possible only if our rdbms, have some methods advised by Java and those methods also written in java language.

	Ok we agree to create some java code following the guideliness of Java.
		That code is called as Driver

	That java code creates lot of classes by implementing the interfaces defined in JDBC

wHAT is JDBC?
	Java DataBase Connectivity

	this is an API	a part of JDK

	packages		java.sql		and 	javax.sql

	these packages define some interfaces, which are implemented by the Database Vendors

	If any RDBMS vendor did not implement jdbc interfaces and did not release a driver, then java cannot access that database

	Can java program, access oracle database?
		there are oracle drivers for java, SO Yes. 
	Can java program, access SQL server, DB2, mysql?		Yes....
---------------
steps to connect with a database and run sql queries
	1) Load the driver
		by creating an object of driver class		(driver is downloaded from database vendor portal)
	2) connect with the database	(information required to connect are "url", "username", "password"
	3) if we are able to represent the connection with db as an object, then that object is used to do all operations in the db (with the help of appropriate statements)
	4) Statement objects are nothing but object representation of sql statements
	5) execute the statements to 
		get result
		manipulate data
	6) close the connection

by default, JDBC connections are in "AUTOCOMMIT" mode.	So every DML operation is automatically committed when successful. They automatically ROLLBACK, when failed due to error.


1) if we are not able to connect to oracle in sql developer using 
		url, uid, pwd, port number,
	then the same details will not work from java also.

	host:	localhost
	port:	1522
	uid:	sys
	pwd:	password
	sid:	XE

	jdbc:oracle:thin:@localhost:1522:XE
		this is what we call it as url


1) Load the driver
	driver is a class created by db vendor. So we need that class. 
	class is in jar file.
	ojdbc8.jar
		include this jar file into our project folder (src or bin?)
		"src" will not be deployed to client machine. so put the jar in "bin" folder

	i) copy the ojdbc8.jar file to the project bin folder
	ii) now, this jar file should be added to the classpath (why?) 
		whenever we create an object of a class (or) refer to a class or interface, the class is either present in jdk or created by me or it should be somewhere and its path should be mentioned in the class path.
	to do this, follow the steps:
		right click project -> properties -> Java Build path -> Libraries tab -> Add external jars button
		locate the jar (inside your project)
		Apply and close

	iii) in our program, we create an object of "Driver" class
		new oracle.jdbc.driver.OracleDriver();

2) Establish connection with the RDBMS server:
	Connection con = DriverManager.getConnection(url, uid, pwd);
		
3) create statement object	
	Statement st=con.createStatement();

4) execute the statement and get result
	
		OracleDriver driver = new oracle.jdbc.driver.OracleDriver();
		String url="jdbc:oracle:thin:@localhost:1522:XE";
		String uid="sys as sysdba";
		String pwd="password";
		DriverManager.registerDriver(driver);
		Connection con = DriverManager.getConnection(url, uid, pwd);
		Statement st=con.createStatement();
		ResultSet rs = st.executeQuery("SELECT * FROM EMPLOYEES");
		while(rs.next())
			System.out.println(rs.getString(1));
		con.close();
		DriverManager.deregisterDriver(driver);

hint:
	use System.out.format to display many columns from the table


Some times, the program should not be hard coded with the driver. 
		The java program must be independent of any RDBMS.
		so we get the driver name as input from the user.
		
		String driverName="oracle.jdbc.driver.OracleDriver";
		Class.forName(driverName);
	

Look at the Statement
		Statement st=con.createStatement();
	we are going to discuss this later.

	st.execute()		//any sql statement but it does not return a value
	st.executeQuery()	//returns ResultSet		(SELECT)
	st.executeUpdate()	//returns noOfRowsAffected	(DML)



Task:
	Ask the user to choose from the choices:
	1) Add Branch
	2) Modify Branch
	3) Remove Branch
	4) Display all branches
	5) Find Branch by Id
	6) Exit

hint:
	for adding, use st.executeUpdate();	with "INSERT INTO..."

import java.util.Scanner;

public class Main_Branch {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		String bid, bname, bcity;
		do
		{
			System.out.println("	1) Add Branch\r\n" + 
					"	2) Modify Branch\r\n" + 
					"	3) Remove Branch\r\n" + 
					"	4) Display all branches\r\n" + 
					"	5) Find Branch by Id\r\n" + 
					"	6) Exit");
			int choice=sc.nextInt();
			switch(choice)
			{
			case 1:		//add branch
				System.out.println("Enter the branch id:");
				bid=sc.next();
				System.out.println("Enter the branch name:");
				bname=sc.nextLine();
				if(bname.equals(""))
					bname=sc.nextLine();
				System.out.println("Enter the branch location:");
				bcity=sc.nextLine();
				//write code to add branch
				break;
			case 2:		//modify branch
				System.out.println("Enter the branch id:");
				bid=sc.next();
				System.out.println("Enter the branch name:");
				bname=sc.nextLine();
				if(bname.equals(""))
					bname=sc.nextLine();
				System.out.println("Enter the branch location:");
				bcity=sc.nextLine();
				//write code to update branch
				break;
			case 3:		//remove branch
				System.out.println("Enter the branch id:");
				bid=sc.next();
				//write code to remove branch
				break;
			case 4:		
				//write code to display all branches
				break;
			case 5:		//find branch by id
				System.out.println("Enter the branch id:");
				bid=sc.next();
				//write code to find branch by id
				break;
			default:
				System.exit(0);
				break;
			}
		}while(true);
	}

}


-----------------FINAL SOLUTION----------------
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Scanner;

public class Main_Branch {

	private static Connection getConn() throws ClassNotFoundException, SQLException
	{
		String driverName="oracle.jdbc.driver.OracleDriver";
		Class.forName(driverName);
		String url="jdbc:oracle:thin:@localhost:1522:XE";
		String uid="sys as sysdba";
		String pwd="password";
//		DriverManager.registerDriver(driver);
		Connection con = DriverManager.getConnection(url, uid, pwd);
		return con;
	}
	public static void main(String[] args) throws ClassNotFoundException, SQLException {
		Scanner sc=new Scanner(System.in);
		String bid, bname, bcity, sql;
		int no=0;
		Connection con=null;
		Statement st=null;
		ResultSet rs=null;
		do
		{
			System.out.println("	1) Add Branch\r\n" + 
					"	2) Modify Branch\r\n" + 
					"	3) Remove Branch\r\n" + 
					"	4) Display all branches\r\n" + 
					"	5) Find Branch by Id\r\n" + 
					"	6) Exit");
			int choice=sc.nextInt();
			switch(choice)
			{
			case 1:		//add branch
				System.out.println("Enter the branch id:");
				bid=sc.next();
				System.out.println("Enter the branch name:");
				bname=sc.nextLine();
				if(bname.equals(""))
					bname=sc.nextLine();
				System.out.println("Enter the branch location:");
				bcity=sc.nextLine();
				//write code to add branch
				con = getConn();
				st = con.createStatement();
				sql=String.format("INSERT INTO Branch VALUES ('%s','%s','%s')", bid, bname, bcity);
				System.out.println(sql);
				no=st.executeUpdate(sql);
				con.close();
				System.out.println(no+" row(s) inserted");
				break;
			case 2:		//modify branch
				System.out.println("Enter the branch id:");
				bid=sc.next();
				System.out.println("Enter the branch name:");
				bname=sc.nextLine();
				if(bname.equals(""))
					bname=sc.nextLine();
				System.out.println("Enter the branch location:");
				bcity=sc.nextLine();
				//write code to update branch
				con = getConn();
				st = con.createStatement();
				sql=String.format("UPDATE Branch SET bname='%s', bcity='%s' WHERE bid='%s'", bname, bcity, bid);
				System.out.println(sql);
				no=st.executeUpdate(sql);
				con.close();
				System.out.println(no+" row(s) updated");
				break;
			case 3:		//remove branch
				System.out.println("Enter the branch id:");
				bid=sc.next();
				//write code to remove branch
				con = getConn();
				st = con.createStatement();
				sql=String.format("DELETE FROM Branch WHERE bid='%s'", bid);
				System.out.println(sql);
				no=st.executeUpdate(sql);
				con.close();
				System.out.println(no+" row(s) deleted");
				break;
			case 4:		
				//write code to display all branches
				con = getConn();
				st = con.createStatement();
				sql=String.format("SELECT * FROM Branch");
				System.out.println(sql);
				rs=st.executeQuery(sql);
				
				System.out.format("%6s\t%-40s\t%-20s\n","ID","Branch Name", "City");
				while(rs.next())
				{
					System.out.format("%6s\t%-40s\t%-20s\n",rs.getString(1),rs.getString(2), rs.getString(3));
				}
				con.close();				
				break;
			case 5:		//find branch by id
				System.out.println("Enter the branch id:");
				bid=sc.next();
				//write code to find branch by id
				con = getConn();
				st = con.createStatement();
				sql=String.format("SELECT * FROM Branch WHERE bid='%s'",bid);
				System.out.println(sql);
				rs=st.executeQuery(sql);
				
				System.out.format("%6s\t%-40s\t%-20s\n","ID","Branch Name", "City");
				while(rs.next())
				{
					System.out.format("%6s\t%-40s\t%-20s\n",rs.getString(1),rs.getString(2), rs.getString(3));
				}
				con.close();
				break;
			default:
				System.exit(0);
				break;
			}
		}while(true);
	}

}
